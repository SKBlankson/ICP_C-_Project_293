//
// Created by sblan on 26/11/2022.
//

#include "Helpers.h"


Helpers::Helpers(){};



/** A method that generates the solution path from the start city
 * to the end city
 * @param solution The final node solution generated by the bfs
 * @param points the RouteFinder object that returned the final node
 * @return
 */
list<Route> Helpers::solutionPath(Node solution, RouteFinder points) {
    list<Route> previousRoutes;
    previousRoutes.push_back(solution.action);
    cout<<"Building solpath"<<endl;
try {
    Node *baseRoute = solution.parent;
    while (baseRoute->state.getCity() !=points.startCity) {
        previousRoutes.push_back(baseRoute->getAction());
        baseRoute = baseRoute->getParent();
    }
    previousRoutes.reverse();
    cout << "Solution path returned!!!" << endl;}

catch (...){return previousRoutes;}
    return previousRoutes;
}


/**
 * This function writes the solution to a file
 *
 * @param path The list of routes that make up the solution
 * @param startCity The city from which the user wants to start the journey.
 * @param endCity The destination city
 * @param sol_pathCost The total number of flights in the solution
 */
void Helpers::writeToFile(list<Route> &path,string startCity,string endCity,int sol_pathCost) {
    int counter = 0;
    int totalStops = 0;

    string fileName = startCity+"-"+endCity+"_output.txt";
    ofstream myFile(fileName);

    for(Route action : path){
        myFile<<to_string(counter+=1)+"."+" "+action.getAirlineCode()+" from "+ action.sourceAirportCode
                + " to " + action.getDestinationCode() +" "+ to_string(action.getStops()) + " stops" +"\n";

        totalStops+=action.getStops();
    }
    myFile<<"Total Flights: "+ to_string(sol_pathCost)<<endl;
    myFile<<"Total additional stops: "+ to_string(totalStops)<<endl;
    myFile<<"Optimality Criteria: No of Flights"<<endl;

    myFile.close();

}


/**
 * It reads the task file and returns a vector of strings containing
 * the start city and country and the end city and country
 *
 * @param sourceFile The file that contains the locations.
 *
 * @return A vector of strings
 */
vector<string> Helpers::readTask(string sourceFile) {
    vector<string> locations;
    vector<string> row;
    string line,word,temp;

    // Read the location file
    try {
        fstream fin;
        fin.open(sourceFile, ios::in);

        while (getline(fin, line)) {
            stringstream s(line);

            while (getline(s, word, ',')) {
                locations.push_back(word);
            }
        }
        return locations;
    }catch (...){
    cout<<"File not found!"<<endl;
    }
    return locations;
}


